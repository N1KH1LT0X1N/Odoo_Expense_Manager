{"$schema":"https://ui.shadcn.com/schema/registry-item.json","name":"woven-light-hero","type":"registry:component","title":"Woven Light Hero","description":"A woven-light-hero component.","dependencies":["framer-motion","three"],"registryDependencies":[],"files":[{"path":"src/components/ui/woven-light-hero.tsx","content":"\"use client\";\n\nimport React, { useRef, useEffect } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport * as THREE from 'three';\n\n// --- Main Hero Component ---\nexport const WovenLightHero = () => {\n  const textControls = useAnimation();\n  const buttonControls = useAnimation();\n\n  useEffect(() => {\n    // Add a more elegant font\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&family=Inter:wght@400&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n\n    textControls.start(i => ({\n      opacity: 1,\n      y: 0,\n      transition: {\n        delay: i * 0.1 + 1.5,\n        duration: 1.2,\n        ease: [0.2, 0.65, 0.3, 0.9]\n      }\n    }));\n    buttonControls.start({\n        opacity: 1,\n        transition: { delay: 2.5, duration: 1 }\n    });\n\n    return () => {\n        document.head.removeChild(link);\n    }\n  }, [textControls, buttonControls]);\n\n  const headline = \"Woven by Light\";\n  \n  return (\n    <div className=\"relative flex h-screen w-full flex-col items-center justify-center overflow-hidden bg-black dark:bg-white\">\n      <WovenCanvas />\n      <HeroNav />\n      <div className=\"relative z-10 text-center px-4\">\n        <h1 className=\"text-6xl md:text-8xl text-white dark:text-slate-900\" style={{ fontFamily: \"'Playfair Display', serif\", textShadow: '0 0 50px rgba(255, 255, 255, 0.3)' }}>\n            {headline.split(\" \").map((word, i) => (\n                <span key={i} className=\"inline-block\">\n                    {word.split(\"\").map((char, j) => (\n                        <motion.span key={j} custom={i * 5 + j} initial={{ opacity: 0, y: 50 }} animate={textControls} style={{ display: 'inline-block' }}>\n                            {char}\n                        </motion.span>\n                    ))}\n                    {i < headline.split(\" \").length - 1 && <span>&nbsp;</span>}\n                </span>\n            ))}\n        </h1>\n        <motion.p\n          custom={headline.length}\n          initial={{ opacity: 0, y: 30 }}\n          animate={textControls}\n          className=\"mx-auto mt-6 max-w-xl text-lg text-slate-300 dark:text-slate-600\"\n          style={{ fontFamily: \"'Inter', sans-serif\" }}\n        >\n          An interactive tapestry of light and motion, crafted with code and creativity.\n        </motion.p>\n        <motion.div initial={{ opacity: 0 }} animate={buttonControls} className=\"mt-10\">\n          <button className=\"rounded-full border-2 border-white/20 bg-white/10 px-8 py-3 font-semibold text-white backdrop-blur-sm transition-all hover:bg-white/20 dark:border-slate-800/20 dark:bg-slate-800/5 dark:text-slate-800 dark:hover:bg-slate-800/10\" style={{ fontFamily: \"'Inter', sans-serif\" }}>\n            Explore the Weave\n          </button>\n        </motion.div>\n      </div>\n    </div>\n  );\n};\n\n// --- Navigation Component ---\nconst HeroNav = () => {\n    return (\n        <motion.nav \n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1, transition: { delay: 1, duration: 1 } }}\n            className=\"absolute top-0 left-0 right-0 z-20 p-6\"\n        >\n            <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n                <div className=\"flex items-center gap-2\">\n                    <span className=\"text-2xl font-bold text-white dark:text-slate-800\">âŽŽ</span>\n                    <span className=\"text-xl font-bold text-white dark:text-slate-800\" style={{ fontFamily: \"'Inter', sans-serif\" }}>Woven</span>\n                </div>\n            </div>\n        </motion.nav>\n    );\n};\n\n// --- Three.js Canvas Component ---\nconst WovenCanvas = () => {\n  const mountRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    mountRef.current.appendChild(renderer.domElement);\n\n    const mouse = new THREE.Vector2(0, 0);\n    const clock = new THREE.Clock();\n\n    const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n    // --- Woven Silk ---\n    const particleCount = 50000;\n    const positions = new Float32Array(particleCount * 3);\n    const originalPositions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n    const velocities = new Float32Array(particleCount * 3);\n\n    const geometry = new THREE.BufferGeometry();\n    const torusKnot = new THREE.TorusKnotGeometry(1.5, 0.5, 200, 32);\n\n    for (let i = 0; i < particleCount; i++) {\n        const vertexIndex = i % torusKnot.attributes.position.count;\n        const x = torusKnot.attributes.position.getX(vertexIndex);\n        const y = torusKnot.attributes.position.getY(vertexIndex);\n        const z = torusKnot.attributes.position.getZ(vertexIndex);\n        \n        positions[i * 3] = x;\n        positions[i * 3 + 1] = y;\n        positions[i * 3 + 2] = z;\n        originalPositions[i * 3] = x;\n        originalPositions[i * 3 + 1] = y;\n        originalPositions[i * 3 + 2] = z;\n\n        const color = new THREE.Color();\n        color.setHSL(Math.random(), 0.8, isDarkMode ? 0.5 : 0.7);\n        colors[i * 3] = color.r;\n        colors[i * 3 + 1] = color.g;\n        colors[i * 3 + 2] = color.b;\n        \n        velocities[i * 3] = 0;\n        velocities[i * 3 + 1] = 0;\n        velocities[i * 3 + 2] = 0;\n    }\n\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n\n    const material = new THREE.PointsMaterial({\n        size: 0.02,\n        vertexColors: true,\n        blending: isDarkMode ? THREE.NormalBlending : THREE.AdditiveBlending,\n        transparent: true,\n        opacity: isDarkMode ? 1.0 : 0.8,\n    });\n\n    const points = new THREE.Points(geometry, material);\n    scene.add(points);\n\n    const handleMouseMove = (event: MouseEvent) => {\n        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n\n    const animate = () => {\n        requestAnimationFrame(animate);\n        const elapsedTime = clock.getElapsedTime();\n        \n        const mouseWorld = new THREE.Vector3(mouse.x * 3, mouse.y * 3, 0);\n\n        for (let i = 0; i < particleCount; i++) {\n            const ix = i * 3;\n            const iy = i * 3 + 1;\n            const iz = i * 3 + 2;\n\n            const currentPos = new THREE.Vector3(positions[ix], positions[iy], positions[iz]);\n            const originalPos = new THREE.Vector3(originalPositions[ix], originalPositions[iy], originalPositions[iz]);\n            const velocity = new THREE.Vector3(velocities[ix], velocities[iy], velocities[iz]);\n\n            const dist = currentPos.distanceTo(mouseWorld);\n            if (dist < 1.5) {\n                const force = (1.5 - dist) * 0.01;\n                const direction = new THREE.Vector3().subVectors(currentPos, mouseWorld).normalize();\n                velocity.add(direction.multiplyScalar(force));\n            }\n\n            // Return to original position\n            const returnForce = new THREE.Vector3().subVectors(originalPos, currentPos).multiplyScalar(0.001);\n            velocity.add(returnForce);\n            \n            // Damping\n            velocity.multiplyScalar(0.95);\n\n            positions[ix] += velocity.x;\n            positions[iy] += velocity.y;\n            positions[iz] += velocity.z;\n            \n            velocities[ix] = velocity.x;\n            velocities[iy] = velocity.y;\n            velocities[iz] = velocity.z;\n        }\n        geometry.attributes.position.needsUpdate = true;\n\n        points.rotation.y = elapsedTime * 0.05;\n        renderer.render(scene, camera);\n    };\n    animate();\n\n    const handleResize = () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n        window.removeEventListener('resize', handleResize);\n        window.removeEventListener('mousemove', handleMouseMove);\n        mountRef.current?.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return <div ref={mountRef} className=\"absolute inset-0 z-0\" />;\n};\n\n","type":"registry:component"}]}